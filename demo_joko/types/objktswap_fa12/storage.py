# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Any, Dict, List, Union

from pydantic import BaseModel, Extra


class Token(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    token_id: str


class CurrencyItem(BaseModel):
    class Config:
        extra = Extra.forbid

    fa12: str


class Fa2(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    token_id: str


class CurrencyItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    fa2: Fa2


class CurrencyItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    tez: Dict[str, Any]


class Share(BaseModel):
    class Config:
        extra = Extra.forbid

    amount: str
    recipient: str


class Auctions(BaseModel):
    class Config:
        extra = Extra.forbid

    creator: str
    token: Token
    currency: Union[CurrencyItem, CurrencyItem1, CurrencyItem2]
    reserve: str
    start_time: str
    end_time: str
    extension_time: str
    price_increment: str
    current_price: str
    highest_bidder: str
    shares: List[Share]


class ObjktswapFa12Storage(BaseModel):
    class Config:
        extra = Extra.forbid

    auctions: Dict[str, Auctions]
    metadata: Dict[str, str]
    next_auction_id: str
    paused: bool
    permission_module: str
    token_registry: str
    upgradable: bool
    big_map: Dict[str, str]
