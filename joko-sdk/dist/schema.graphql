schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "ask"
"""
type ask {
  amount: String!

  """An object relationship"""
  asker: asker!
  askerId: String!
  editions: String!
  id: bigint!
  level: bigint!
  timestamp: timestamptz!
  tokenAddress: String!
  tokenId: String!
}

"""
order by aggregate values of table "ask"
"""
input ask_aggregate_order_by {
  avg: ask_avg_order_by
  count: order_by
  max: ask_max_order_by
  min: ask_min_order_by
  stddev: ask_stddev_order_by
  stddev_pop: ask_stddev_pop_order_by
  stddev_samp: ask_stddev_samp_order_by
  sum: ask_sum_order_by
  var_pop: ask_var_pop_order_by
  var_samp: ask_var_samp_order_by
  variance: ask_variance_order_by
}

"""
columns and relationships of "ask_auction"
"""
type ask_auction {
  """An object relationship"""
  auctionCreator: auction_creator!
  auctionCreatorId: String!
  endTime: timestamptz!
  id: bigint!
  level: bigint!
  priceIncrement: String!
  reserve: String!
  startTime: timestamptz!
  timestamp: timestamptz!
  tokenAddress: String!
  tokenId: String!
}

"""
order by aggregate values of table "ask_auction"
"""
input ask_auction_aggregate_order_by {
  avg: ask_auction_avg_order_by
  count: order_by
  max: ask_auction_max_order_by
  min: ask_auction_min_order_by
  stddev: ask_auction_stddev_order_by
  stddev_pop: ask_auction_stddev_pop_order_by
  stddev_samp: ask_auction_stddev_samp_order_by
  sum: ask_auction_sum_order_by
  var_pop: ask_auction_var_pop_order_by
  var_samp: ask_auction_var_samp_order_by
  variance: ask_auction_variance_order_by
}

"""
order by avg() on columns of table "ask_auction"
"""
input ask_auction_avg_order_by {
  id: order_by
  level: order_by
}

"""
Boolean expression to filter rows from the table "ask_auction". All fields are combined with a logical 'AND'.
"""
input ask_auction_bool_exp {
  _and: [ask_auction_bool_exp!]
  _not: ask_auction_bool_exp
  _or: [ask_auction_bool_exp!]
  auctionCreator: auction_creator_bool_exp
  auctionCreatorId: String_comparison_exp
  endTime: timestamptz_comparison_exp
  id: bigint_comparison_exp
  level: bigint_comparison_exp
  priceIncrement: String_comparison_exp
  reserve: String_comparison_exp
  startTime: timestamptz_comparison_exp
  timestamp: timestamptz_comparison_exp
  tokenAddress: String_comparison_exp
  tokenId: String_comparison_exp
}

"""
order by max() on columns of table "ask_auction"
"""
input ask_auction_max_order_by {
  auctionCreatorId: order_by
  endTime: order_by
  id: order_by
  level: order_by
  priceIncrement: order_by
  reserve: order_by
  startTime: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
order by min() on columns of table "ask_auction"
"""
input ask_auction_min_order_by {
  auctionCreatorId: order_by
  endTime: order_by
  id: order_by
  level: order_by
  priceIncrement: order_by
  reserve: order_by
  startTime: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""Ordering options when selecting data from "ask_auction"."""
input ask_auction_order_by {
  auctionCreator: auction_creator_order_by
  auctionCreatorId: order_by
  endTime: order_by
  id: order_by
  level: order_by
  priceIncrement: order_by
  reserve: order_by
  startTime: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
select columns of table "ask_auction"
"""
enum ask_auction_select_column {
  """column name"""
  auctionCreatorId

  """column name"""
  endTime

  """column name"""
  id

  """column name"""
  level

  """column name"""
  priceIncrement

  """column name"""
  reserve

  """column name"""
  startTime

  """column name"""
  timestamp

  """column name"""
  tokenAddress

  """column name"""
  tokenId
}

"""
order by stddev() on columns of table "ask_auction"
"""
input ask_auction_stddev_order_by {
  id: order_by
  level: order_by
}

"""
order by stddev_pop() on columns of table "ask_auction"
"""
input ask_auction_stddev_pop_order_by {
  id: order_by
  level: order_by
}

"""
order by stddev_samp() on columns of table "ask_auction"
"""
input ask_auction_stddev_samp_order_by {
  id: order_by
  level: order_by
}

"""
order by sum() on columns of table "ask_auction"
"""
input ask_auction_sum_order_by {
  id: order_by
  level: order_by
}

"""
order by var_pop() on columns of table "ask_auction"
"""
input ask_auction_var_pop_order_by {
  id: order_by
  level: order_by
}

"""
order by var_samp() on columns of table "ask_auction"
"""
input ask_auction_var_samp_order_by {
  id: order_by
  level: order_by
}

"""
order by variance() on columns of table "ask_auction"
"""
input ask_auction_variance_order_by {
  id: order_by
  level: order_by
}

"""
order by avg() on columns of table "ask"
"""
input ask_avg_order_by {
  id: order_by
  level: order_by
}

"""
Boolean expression to filter rows from the table "ask". All fields are combined with a logical 'AND'.
"""
input ask_bool_exp {
  _and: [ask_bool_exp!]
  _not: ask_bool_exp
  _or: [ask_bool_exp!]
  amount: String_comparison_exp
  asker: asker_bool_exp
  askerId: String_comparison_exp
  editions: String_comparison_exp
  id: bigint_comparison_exp
  level: bigint_comparison_exp
  timestamp: timestamptz_comparison_exp
  tokenAddress: String_comparison_exp
  tokenId: String_comparison_exp
}

"""
order by max() on columns of table "ask"
"""
input ask_max_order_by {
  amount: order_by
  askerId: order_by
  editions: order_by
  id: order_by
  level: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
order by min() on columns of table "ask"
"""
input ask_min_order_by {
  amount: order_by
  askerId: order_by
  editions: order_by
  id: order_by
  level: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""Ordering options when selecting data from "ask"."""
input ask_order_by {
  amount: order_by
  asker: asker_order_by
  askerId: order_by
  editions: order_by
  id: order_by
  level: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
select columns of table "ask"
"""
enum ask_select_column {
  """column name"""
  amount

  """column name"""
  askerId

  """column name"""
  editions

  """column name"""
  id

  """column name"""
  level

  """column name"""
  timestamp

  """column name"""
  tokenAddress

  """column name"""
  tokenId
}

"""
order by stddev() on columns of table "ask"
"""
input ask_stddev_order_by {
  id: order_by
  level: order_by
}

"""
order by stddev_pop() on columns of table "ask"
"""
input ask_stddev_pop_order_by {
  id: order_by
  level: order_by
}

"""
order by stddev_samp() on columns of table "ask"
"""
input ask_stddev_samp_order_by {
  id: order_by
  level: order_by
}

"""
order by sum() on columns of table "ask"
"""
input ask_sum_order_by {
  id: order_by
  level: order_by
}

"""
order by var_pop() on columns of table "ask"
"""
input ask_var_pop_order_by {
  id: order_by
  level: order_by
}

"""
order by var_samp() on columns of table "ask"
"""
input ask_var_samp_order_by {
  id: order_by
  level: order_by
}

"""
order by variance() on columns of table "ask"
"""
input ask_variance_order_by {
  id: order_by
  level: order_by
}

"""
columns and relationships of "asker"
"""
type asker {
  address: String!

  """An array relationship"""
  asks(
    """distinct select on columns"""
    distinct_on: [ask_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ask_order_by!]

    """filter the rows returned"""
    where: ask_bool_exp
  ): [ask!]!
}

"""
Boolean expression to filter rows from the table "asker". All fields are combined with a logical 'AND'.
"""
input asker_bool_exp {
  _and: [asker_bool_exp!]
  _not: asker_bool_exp
  _or: [asker_bool_exp!]
  address: String_comparison_exp
  asks: ask_bool_exp
}

"""Ordering options when selecting data from "asker"."""
input asker_order_by {
  address: order_by
  asks_aggregate: ask_aggregate_order_by
}

"""
select columns of table "asker"
"""
enum asker_select_column {
  """column name"""
  address
}

"""
columns and relationships of "auction_creator"
"""
type auction_creator {
  address: String!

  """An array relationship"""
  askAuctions(
    """distinct select on columns"""
    distinct_on: [ask_auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ask_auction_order_by!]

    """filter the rows returned"""
    where: ask_auction_bool_exp
  ): [ask_auction!]!
}

"""
Boolean expression to filter rows from the table "auction_creator". All fields are combined with a logical 'AND'.
"""
input auction_creator_bool_exp {
  _and: [auction_creator_bool_exp!]
  _not: auction_creator_bool_exp
  _or: [auction_creator_bool_exp!]
  address: String_comparison_exp
  askAuctions: ask_auction_bool_exp
}

"""Ordering options when selecting data from "auction_creator"."""
input auction_creator_order_by {
  address: order_by
  askAuctions_aggregate: ask_auction_aggregate_order_by
}

"""
select columns of table "auction_creator"
"""
enum auction_creator_select_column {
  """column name"""
  address
}

"""
columns and relationships of "bid"
"""
type bid {
  """An object relationship"""
  bidder: bidder!
  bidderId: String!
  endTime: timestamptz!

  """An object relationship"""
  highestBidder: highest_bidder!
  highestBidderId: String!
  id: bigint!
  level: bigint!
  price: numeric!
  startTime: timestamptz!
  timestamp: timestamptz!
  tokenAddress: String!
  tokenId: String!
}

"""
order by aggregate values of table "bid"
"""
input bid_aggregate_order_by {
  avg: bid_avg_order_by
  count: order_by
  max: bid_max_order_by
  min: bid_min_order_by
  stddev: bid_stddev_order_by
  stddev_pop: bid_stddev_pop_order_by
  stddev_samp: bid_stddev_samp_order_by
  sum: bid_sum_order_by
  var_pop: bid_var_pop_order_by
  var_samp: bid_var_samp_order_by
  variance: bid_variance_order_by
}

"""
order by avg() on columns of table "bid"
"""
input bid_avg_order_by {
  id: order_by
  level: order_by
  price: order_by
}

"""
Boolean expression to filter rows from the table "bid". All fields are combined with a logical 'AND'.
"""
input bid_bool_exp {
  _and: [bid_bool_exp!]
  _not: bid_bool_exp
  _or: [bid_bool_exp!]
  bidder: bidder_bool_exp
  bidderId: String_comparison_exp
  endTime: timestamptz_comparison_exp
  highestBidder: highest_bidder_bool_exp
  highestBidderId: String_comparison_exp
  id: bigint_comparison_exp
  level: bigint_comparison_exp
  price: numeric_comparison_exp
  startTime: timestamptz_comparison_exp
  timestamp: timestamptz_comparison_exp
  tokenAddress: String_comparison_exp
  tokenId: String_comparison_exp
}

"""
order by max() on columns of table "bid"
"""
input bid_max_order_by {
  bidderId: order_by
  endTime: order_by
  highestBidderId: order_by
  id: order_by
  level: order_by
  price: order_by
  startTime: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
order by min() on columns of table "bid"
"""
input bid_min_order_by {
  bidderId: order_by
  endTime: order_by
  highestBidderId: order_by
  id: order_by
  level: order_by
  price: order_by
  startTime: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""Ordering options when selecting data from "bid"."""
input bid_order_by {
  bidder: bidder_order_by
  bidderId: order_by
  endTime: order_by
  highestBidder: highest_bidder_order_by
  highestBidderId: order_by
  id: order_by
  level: order_by
  price: order_by
  startTime: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
select columns of table "bid"
"""
enum bid_select_column {
  """column name"""
  bidderId

  """column name"""
  endTime

  """column name"""
  highestBidderId

  """column name"""
  id

  """column name"""
  level

  """column name"""
  price

  """column name"""
  startTime

  """column name"""
  timestamp

  """column name"""
  tokenAddress

  """column name"""
  tokenId
}

"""
order by stddev() on columns of table "bid"
"""
input bid_stddev_order_by {
  id: order_by
  level: order_by
  price: order_by
}

"""
order by stddev_pop() on columns of table "bid"
"""
input bid_stddev_pop_order_by {
  id: order_by
  level: order_by
  price: order_by
}

"""
order by stddev_samp() on columns of table "bid"
"""
input bid_stddev_samp_order_by {
  id: order_by
  level: order_by
  price: order_by
}

"""
order by sum() on columns of table "bid"
"""
input bid_sum_order_by {
  id: order_by
  level: order_by
  price: order_by
}

"""
order by var_pop() on columns of table "bid"
"""
input bid_var_pop_order_by {
  id: order_by
  level: order_by
  price: order_by
}

"""
order by var_samp() on columns of table "bid"
"""
input bid_var_samp_order_by {
  id: order_by
  level: order_by
  price: order_by
}

"""
order by variance() on columns of table "bid"
"""
input bid_variance_order_by {
  id: order_by
  level: order_by
  price: order_by
}

"""
columns and relationships of "bidder"
"""
type bidder {
  address: String!

  """An array relationship"""
  bids(
    """distinct select on columns"""
    distinct_on: [bid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bid_order_by!]

    """filter the rows returned"""
    where: bid_bool_exp
  ): [bid!]!
}

"""
Boolean expression to filter rows from the table "bidder". All fields are combined with a logical 'AND'.
"""
input bidder_bool_exp {
  _and: [bidder_bool_exp!]
  _not: bidder_bool_exp
  _or: [bidder_bool_exp!]
  address: String_comparison_exp
  bids: bid_bool_exp
}

"""Ordering options when selecting data from "bidder"."""
input bidder_order_by {
  address: order_by
  bids_aggregate: bid_aggregate_order_by
}

"""
select columns of table "bidder"
"""
enum bidder_select_column {
  """column name"""
  address
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "buy"
"""
type buy {
  buyAmount: String!
  buyFrom: String!

  """An object relationship"""
  buyer: buyer!
  buyerId: String!
  id: bigint!
  level: bigint!
  timestamp: timestamptz!
  tokenAddress: String!
  tokenId: String!
}

"""
order by aggregate values of table "buy"
"""
input buy_aggregate_order_by {
  avg: buy_avg_order_by
  count: order_by
  max: buy_max_order_by
  min: buy_min_order_by
  stddev: buy_stddev_order_by
  stddev_pop: buy_stddev_pop_order_by
  stddev_samp: buy_stddev_samp_order_by
  sum: buy_sum_order_by
  var_pop: buy_var_pop_order_by
  var_samp: buy_var_samp_order_by
  variance: buy_variance_order_by
}

"""
order by avg() on columns of table "buy"
"""
input buy_avg_order_by {
  id: order_by
  level: order_by
}

"""
Boolean expression to filter rows from the table "buy". All fields are combined with a logical 'AND'.
"""
input buy_bool_exp {
  _and: [buy_bool_exp!]
  _not: buy_bool_exp
  _or: [buy_bool_exp!]
  buyAmount: String_comparison_exp
  buyFrom: String_comparison_exp
  buyer: buyer_bool_exp
  buyerId: String_comparison_exp
  id: bigint_comparison_exp
  level: bigint_comparison_exp
  timestamp: timestamptz_comparison_exp
  tokenAddress: String_comparison_exp
  tokenId: String_comparison_exp
}

"""
order by max() on columns of table "buy"
"""
input buy_max_order_by {
  buyAmount: order_by
  buyFrom: order_by
  buyerId: order_by
  id: order_by
  level: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
order by min() on columns of table "buy"
"""
input buy_min_order_by {
  buyAmount: order_by
  buyFrom: order_by
  buyerId: order_by
  id: order_by
  level: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""Ordering options when selecting data from "buy"."""
input buy_order_by {
  buyAmount: order_by
  buyFrom: order_by
  buyer: buyer_order_by
  buyerId: order_by
  id: order_by
  level: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
select columns of table "buy"
"""
enum buy_select_column {
  """column name"""
  buyAmount

  """column name"""
  buyFrom

  """column name"""
  buyerId

  """column name"""
  id

  """column name"""
  level

  """column name"""
  timestamp

  """column name"""
  tokenAddress

  """column name"""
  tokenId
}

"""
order by stddev() on columns of table "buy"
"""
input buy_stddev_order_by {
  id: order_by
  level: order_by
}

"""
order by stddev_pop() on columns of table "buy"
"""
input buy_stddev_pop_order_by {
  id: order_by
  level: order_by
}

"""
order by stddev_samp() on columns of table "buy"
"""
input buy_stddev_samp_order_by {
  id: order_by
  level: order_by
}

"""
order by sum() on columns of table "buy"
"""
input buy_sum_order_by {
  id: order_by
  level: order_by
}

"""
order by var_pop() on columns of table "buy"
"""
input buy_var_pop_order_by {
  id: order_by
  level: order_by
}

"""
order by var_samp() on columns of table "buy"
"""
input buy_var_samp_order_by {
  id: order_by
  level: order_by
}

"""
order by variance() on columns of table "buy"
"""
input buy_variance_order_by {
  id: order_by
  level: order_by
}

"""
columns and relationships of "buyer"
"""
type buyer {
  address: String!

  """An array relationship"""
  buys(
    """distinct select on columns"""
    distinct_on: [buy_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buy_order_by!]

    """filter the rows returned"""
    where: buy_bool_exp
  ): [buy!]!
}

"""
Boolean expression to filter rows from the table "buyer". All fields are combined with a logical 'AND'.
"""
input buyer_bool_exp {
  _and: [buyer_bool_exp!]
  _not: buyer_bool_exp
  _or: [buyer_bool_exp!]
  address: String_comparison_exp
  buys: buy_bool_exp
}

"""Ordering options when selecting data from "buyer"."""
input buyer_order_by {
  address: order_by
  buys_aggregate: buy_aggregate_order_by
}

"""
select columns of table "buyer"
"""
enum buyer_select_column {
  """column name"""
  address
}

"""
columns and relationships of "dipdup_contract"
"""
type dipdup_contract {
  address: String!
  createdAt: timestamptz!
  name: String!
  typename: String
  updatedAt: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_contract". All fields are combined with a logical 'AND'.
"""
input dipdup_contract_bool_exp {
  _and: [dipdup_contract_bool_exp!]
  _not: dipdup_contract_bool_exp
  _or: [dipdup_contract_bool_exp!]
  address: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  name: String_comparison_exp
  typename: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""
columns and relationships of "dipdup_contract_metadata"
"""
type dipdup_contract_metadata {
  contract: String!
  createdAt: timestamptz!
  id: Int!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb!
  network: String!
  updateId: Int!
  updatedAt: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_contract_metadata". All fields are combined with a logical 'AND'.
"""
input dipdup_contract_metadata_bool_exp {
  _and: [dipdup_contract_metadata_bool_exp!]
  _not: dipdup_contract_metadata_bool_exp
  _or: [dipdup_contract_metadata_bool_exp!]
  contract: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  metadata: jsonb_comparison_exp
  network: String_comparison_exp
  updateId: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "dipdup_contract_metadata"."""
input dipdup_contract_metadata_order_by {
  contract: order_by
  createdAt: order_by
  id: order_by
  metadata: order_by
  network: order_by
  updateId: order_by
  updatedAt: order_by
}

"""
select columns of table "dipdup_contract_metadata"
"""
enum dipdup_contract_metadata_select_column {
  """column name"""
  contract

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  network

  """column name"""
  updateId

  """column name"""
  updatedAt
}

"""Ordering options when selecting data from "dipdup_contract"."""
input dipdup_contract_order_by {
  address: order_by
  createdAt: order_by
  name: order_by
  typename: order_by
  updatedAt: order_by
}

"""
select columns of table "dipdup_contract"
"""
enum dipdup_contract_select_column {
  """column name"""
  address

  """column name"""
  createdAt

  """column name"""
  name

  """column name"""
  typename

  """column name"""
  updatedAt
}

"""
columns and relationships of "dipdup_head"
"""
type dipdup_head {
  createdAt: timestamptz!
  hash: String!
  level: Int!
  name: String!
  timestamp: timestamptz!
  updatedAt: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_head". All fields are combined with a logical 'AND'.
"""
input dipdup_head_bool_exp {
  _and: [dipdup_head_bool_exp!]
  _not: dipdup_head_bool_exp
  _or: [dipdup_head_bool_exp!]
  createdAt: timestamptz_comparison_exp
  hash: String_comparison_exp
  level: Int_comparison_exp
  name: String_comparison_exp
  timestamp: timestamptz_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "dipdup_head"."""
input dipdup_head_order_by {
  createdAt: order_by
  hash: order_by
  level: order_by
  name: order_by
  timestamp: order_by
  updatedAt: order_by
}

"""
select columns of table "dipdup_head"
"""
enum dipdup_head_select_column {
  """column name"""
  createdAt

  """column name"""
  hash

  """column name"""
  level

  """column name"""
  name

  """column name"""
  timestamp

  """column name"""
  updatedAt
}

"""
columns and relationships of "dipdup_head_status"
"""
type dipdup_head_status {
  name: String
  status: String
}

"""
Boolean expression to filter rows from the table "dipdup_head_status". All fields are combined with a logical 'AND'.
"""
input dipdup_head_status_bool_exp {
  _and: [dipdup_head_status_bool_exp!]
  _not: dipdup_head_status_bool_exp
  _or: [dipdup_head_status_bool_exp!]
  name: String_comparison_exp
  status: String_comparison_exp
}

"""Ordering options when selecting data from "dipdup_head_status"."""
input dipdup_head_status_order_by {
  name: order_by
  status: order_by
}

"""
select columns of table "dipdup_head_status"
"""
enum dipdup_head_status_select_column {
  """column name"""
  name

  """column name"""
  status
}

"""
columns and relationships of "dipdup_index"
"""
type dipdup_index {
  configHash: String!
  createdAt: timestamptz!
  level: Int!
  name: String!

  """
  NEW: NEW\nSYNCING: SYNCING\nREALTIME: REALTIME\nROLLBACK: ROLLBACK\nONESHOT: ONESHOT
  """
  status: String!
  template: String
  templateValues(
    """JSON select path"""
    path: String
  ): jsonb

  """
  operation: operation\nbig_map: big_map\nhead: head\ntoken_transfer: token_transfer
  """
  type: String!
  updatedAt: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_index". All fields are combined with a logical 'AND'.
"""
input dipdup_index_bool_exp {
  _and: [dipdup_index_bool_exp!]
  _not: dipdup_index_bool_exp
  _or: [dipdup_index_bool_exp!]
  configHash: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  level: Int_comparison_exp
  name: String_comparison_exp
  status: String_comparison_exp
  template: String_comparison_exp
  templateValues: jsonb_comparison_exp
  type: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "dipdup_index"."""
input dipdup_index_order_by {
  configHash: order_by
  createdAt: order_by
  level: order_by
  name: order_by
  status: order_by
  template: order_by
  templateValues: order_by
  type: order_by
  updatedAt: order_by
}

"""
select columns of table "dipdup_index"
"""
enum dipdup_index_select_column {
  """column name"""
  configHash

  """column name"""
  createdAt

  """column name"""
  level

  """column name"""
  name

  """column name"""
  status

  """column name"""
  template

  """column name"""
  templateValues

  """column name"""
  type

  """column name"""
  updatedAt
}

"""
columns and relationships of "dipdup_schema"
"""
type dipdup_schema {
  createdAt: timestamptz!
  hash: String!
  name: String!

  """
  manual: manual\nmigration: migration\nrollback: rollback\nconfig_modified: config_modified\nschema_modified: schema_modified
  """
  reindex: String
  updatedAt: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_schema". All fields are combined with a logical 'AND'.
"""
input dipdup_schema_bool_exp {
  _and: [dipdup_schema_bool_exp!]
  _not: dipdup_schema_bool_exp
  _or: [dipdup_schema_bool_exp!]
  createdAt: timestamptz_comparison_exp
  hash: String_comparison_exp
  name: String_comparison_exp
  reindex: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "dipdup_schema"."""
input dipdup_schema_order_by {
  createdAt: order_by
  hash: order_by
  name: order_by
  reindex: order_by
  updatedAt: order_by
}

"""
select columns of table "dipdup_schema"
"""
enum dipdup_schema_select_column {
  """column name"""
  createdAt

  """column name"""
  hash

  """column name"""
  name

  """column name"""
  reindex

  """column name"""
  updatedAt
}

"""
columns and relationships of "dipdup_token_metadata"
"""
type dipdup_token_metadata {
  contract: String!
  createdAt: timestamptz!
  id: Int!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb!
  network: String!
  tokenId: String!
  updateId: Int!
  updatedAt: timestamptz!
}

"""
Boolean expression to filter rows from the table "dipdup_token_metadata". All fields are combined with a logical 'AND'.
"""
input dipdup_token_metadata_bool_exp {
  _and: [dipdup_token_metadata_bool_exp!]
  _not: dipdup_token_metadata_bool_exp
  _or: [dipdup_token_metadata_bool_exp!]
  contract: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  metadata: jsonb_comparison_exp
  network: String_comparison_exp
  tokenId: String_comparison_exp
  updateId: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "dipdup_token_metadata"."""
input dipdup_token_metadata_order_by {
  contract: order_by
  createdAt: order_by
  id: order_by
  metadata: order_by
  network: order_by
  tokenId: order_by
  updateId: order_by
  updatedAt: order_by
}

"""
select columns of table "dipdup_token_metadata"
"""
enum dipdup_token_metadata_select_column {
  """column name"""
  contract

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  network

  """column name"""
  tokenId

  """column name"""
  updateId

  """column name"""
  updatedAt
}

"""
columns and relationships of "from"
"""
type from {
  address: String!

  """An array relationship"""
  lastSales(
    """distinct select on columns"""
    distinct_on: [last_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [last_sale_order_by!]

    """filter the rows returned"""
    where: last_sale_bool_exp
  ): [last_sale!]!
}

"""
Boolean expression to filter rows from the table "from". All fields are combined with a logical 'AND'.
"""
input from_bool_exp {
  _and: [from_bool_exp!]
  _not: from_bool_exp
  _or: [from_bool_exp!]
  address: String_comparison_exp
  lastSales: last_sale_bool_exp
}

"""Ordering options when selecting data from "from"."""
input from_order_by {
  address: order_by
  lastSales_aggregate: last_sale_aggregate_order_by
}

"""
select columns of table "from"
"""
enum from_select_column {
  """column name"""
  address
}

"""
columns and relationships of "highest_bidder"
"""
type highest_bidder {
  address: String!

  """An array relationship"""
  bids(
    """distinct select on columns"""
    distinct_on: [bid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bid_order_by!]

    """filter the rows returned"""
    where: bid_bool_exp
  ): [bid!]!
}

"""
Boolean expression to filter rows from the table "highest_bidder". All fields are combined with a logical 'AND'.
"""
input highest_bidder_bool_exp {
  _and: [highest_bidder_bool_exp!]
  _not: highest_bidder_bool_exp
  _or: [highest_bidder_bool_exp!]
  address: String_comparison_exp
  bids: bid_bool_exp
}

"""Ordering options when selecting data from "highest_bidder"."""
input highest_bidder_order_by {
  address: order_by
  bids_aggregate: bid_aggregate_order_by
}

"""
select columns of table "highest_bidder"
"""
enum highest_bidder_select_column {
  """column name"""
  address
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "last_sale"
"""
type last_sale {
  amount: String!
  askId: String!
  fromId: String!

  """An object relationship"""
  from_: from!
  id: bigint!
  level: bigint!
  timestamp: timestamptz!
  toId: String!

  """An object relationship"""
  to_: to!
  tokenId: String!
  tokenQty: numeric!
}

"""
order by aggregate values of table "last_sale"
"""
input last_sale_aggregate_order_by {
  avg: last_sale_avg_order_by
  count: order_by
  max: last_sale_max_order_by
  min: last_sale_min_order_by
  stddev: last_sale_stddev_order_by
  stddev_pop: last_sale_stddev_pop_order_by
  stddev_samp: last_sale_stddev_samp_order_by
  sum: last_sale_sum_order_by
  var_pop: last_sale_var_pop_order_by
  var_samp: last_sale_var_samp_order_by
  variance: last_sale_variance_order_by
}

"""
order by avg() on columns of table "last_sale"
"""
input last_sale_avg_order_by {
  id: order_by
  level: order_by
  tokenQty: order_by
}

"""
Boolean expression to filter rows from the table "last_sale". All fields are combined with a logical 'AND'.
"""
input last_sale_bool_exp {
  _and: [last_sale_bool_exp!]
  _not: last_sale_bool_exp
  _or: [last_sale_bool_exp!]
  amount: String_comparison_exp
  askId: String_comparison_exp
  fromId: String_comparison_exp
  from_: from_bool_exp
  id: bigint_comparison_exp
  level: bigint_comparison_exp
  timestamp: timestamptz_comparison_exp
  toId: String_comparison_exp
  to_: to_bool_exp
  tokenId: String_comparison_exp
  tokenQty: numeric_comparison_exp
}

"""
order by max() on columns of table "last_sale"
"""
input last_sale_max_order_by {
  amount: order_by
  askId: order_by
  fromId: order_by
  id: order_by
  level: order_by
  timestamp: order_by
  toId: order_by
  tokenId: order_by
  tokenQty: order_by
}

"""
order by min() on columns of table "last_sale"
"""
input last_sale_min_order_by {
  amount: order_by
  askId: order_by
  fromId: order_by
  id: order_by
  level: order_by
  timestamp: order_by
  toId: order_by
  tokenId: order_by
  tokenQty: order_by
}

"""Ordering options when selecting data from "last_sale"."""
input last_sale_order_by {
  amount: order_by
  askId: order_by
  fromId: order_by
  from_: from_order_by
  id: order_by
  level: order_by
  timestamp: order_by
  toId: order_by
  to_: to_order_by
  tokenId: order_by
  tokenQty: order_by
}

"""
select columns of table "last_sale"
"""
enum last_sale_select_column {
  """column name"""
  amount

  """column name"""
  askId

  """column name"""
  fromId

  """column name"""
  id

  """column name"""
  level

  """column name"""
  timestamp

  """column name"""
  toId

  """column name"""
  tokenId

  """column name"""
  tokenQty
}

"""
order by stddev() on columns of table "last_sale"
"""
input last_sale_stddev_order_by {
  id: order_by
  level: order_by
  tokenQty: order_by
}

"""
order by stddev_pop() on columns of table "last_sale"
"""
input last_sale_stddev_pop_order_by {
  id: order_by
  level: order_by
  tokenQty: order_by
}

"""
order by stddev_samp() on columns of table "last_sale"
"""
input last_sale_stddev_samp_order_by {
  id: order_by
  level: order_by
  tokenQty: order_by
}

"""
order by sum() on columns of table "last_sale"
"""
input last_sale_sum_order_by {
  id: order_by
  level: order_by
  tokenQty: order_by
}

"""
order by var_pop() on columns of table "last_sale"
"""
input last_sale_var_pop_order_by {
  id: order_by
  level: order_by
  tokenQty: order_by
}

"""
order by var_samp() on columns of table "last_sale"
"""
input last_sale_var_samp_order_by {
  id: order_by
  level: order_by
  tokenQty: order_by
}

"""
order by variance() on columns of table "last_sale"
"""
input last_sale_variance_order_by {
  id: order_by
  level: order_by
  tokenQty: order_by
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "ask"
  """
  ask(
    """distinct select on columns"""
    distinct_on: [ask_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ask_order_by!]

    """filter the rows returned"""
    where: ask_bool_exp
  ): [ask!]!

  """
  fetch data from the table: "ask_auction"
  """
  askAuction(
    """distinct select on columns"""
    distinct_on: [ask_auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ask_auction_order_by!]

    """filter the rows returned"""
    where: ask_auction_bool_exp
  ): [ask_auction!]!

  """fetch data from the table: "ask_auction" using primary key columns"""
  askAuctionByPk(id: bigint!): ask_auction

  """fetch data from the table: "ask" using primary key columns"""
  askByPk(id: bigint!): ask

  """
  fetch data from the table: "asker"
  """
  asker(
    """distinct select on columns"""
    distinct_on: [asker_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asker_order_by!]

    """filter the rows returned"""
    where: asker_bool_exp
  ): [asker!]!

  """fetch data from the table: "asker" using primary key columns"""
  askerByPk(address: String!): asker

  """
  fetch data from the table: "auction_creator"
  """
  auctionCreator(
    """distinct select on columns"""
    distinct_on: [auction_creator_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auction_creator_order_by!]

    """filter the rows returned"""
    where: auction_creator_bool_exp
  ): [auction_creator!]!

  """fetch data from the table: "auction_creator" using primary key columns"""
  auctionCreatorByPk(address: String!): auction_creator

  """
  fetch data from the table: "bid"
  """
  bid(
    """distinct select on columns"""
    distinct_on: [bid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bid_order_by!]

    """filter the rows returned"""
    where: bid_bool_exp
  ): [bid!]!

  """fetch data from the table: "bid" using primary key columns"""
  bidByPk(id: bigint!): bid

  """
  fetch data from the table: "bidder"
  """
  bidder(
    """distinct select on columns"""
    distinct_on: [bidder_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bidder_order_by!]

    """filter the rows returned"""
    where: bidder_bool_exp
  ): [bidder!]!

  """fetch data from the table: "bidder" using primary key columns"""
  bidderByPk(address: String!): bidder

  """
  fetch data from the table: "buy"
  """
  buy(
    """distinct select on columns"""
    distinct_on: [buy_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buy_order_by!]

    """filter the rows returned"""
    where: buy_bool_exp
  ): [buy!]!

  """fetch data from the table: "buy" using primary key columns"""
  buyByPk(id: bigint!): buy

  """
  fetch data from the table: "buyer"
  """
  buyer(
    """distinct select on columns"""
    distinct_on: [buyer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buyer_order_by!]

    """filter the rows returned"""
    where: buyer_bool_exp
  ): [buyer!]!

  """fetch data from the table: "buyer" using primary key columns"""
  buyerByPk(address: String!): buyer

  """
  fetch data from the table: "dipdup_contract"
  """
  dipdupContract(
    """distinct select on columns"""
    distinct_on: [dipdup_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_contract_order_by!]

    """filter the rows returned"""
    where: dipdup_contract_bool_exp
  ): [dipdup_contract!]!

  """fetch data from the table: "dipdup_contract" using primary key columns"""
  dipdupContractByPk(name: String!): dipdup_contract

  """
  fetch data from the table: "dipdup_contract_metadata"
  """
  dipdupContractMetadata(
    """distinct select on columns"""
    distinct_on: [dipdup_contract_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_contract_metadata_order_by!]

    """filter the rows returned"""
    where: dipdup_contract_metadata_bool_exp
  ): [dipdup_contract_metadata!]!

  """
  fetch data from the table: "dipdup_contract_metadata" using primary key columns
  """
  dipdupContractMetadataByPk(id: Int!): dipdup_contract_metadata

  """
  fetch data from the table: "dipdup_head"
  """
  dipdupHead(
    """distinct select on columns"""
    distinct_on: [dipdup_head_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_head_order_by!]

    """filter the rows returned"""
    where: dipdup_head_bool_exp
  ): [dipdup_head!]!

  """fetch data from the table: "dipdup_head" using primary key columns"""
  dipdupHeadByPk(name: String!): dipdup_head

  """
  fetch data from the table: "dipdup_head_status"
  """
  dipdupHeadStatus(
    """distinct select on columns"""
    distinct_on: [dipdup_head_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_head_status_order_by!]

    """filter the rows returned"""
    where: dipdup_head_status_bool_exp
  ): [dipdup_head_status!]!

  """
  fetch data from the table: "dipdup_index"
  """
  dipdupIndex(
    """distinct select on columns"""
    distinct_on: [dipdup_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_index_order_by!]

    """filter the rows returned"""
    where: dipdup_index_bool_exp
  ): [dipdup_index!]!

  """fetch data from the table: "dipdup_index" using primary key columns"""
  dipdupIndexByPk(name: String!): dipdup_index

  """
  fetch data from the table: "dipdup_schema"
  """
  dipdupSchema(
    """distinct select on columns"""
    distinct_on: [dipdup_schema_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_schema_order_by!]

    """filter the rows returned"""
    where: dipdup_schema_bool_exp
  ): [dipdup_schema!]!

  """fetch data from the table: "dipdup_schema" using primary key columns"""
  dipdupSchemaByPk(name: String!): dipdup_schema

  """
  fetch data from the table: "dipdup_token_metadata"
  """
  dipdupTokenMetadata(
    """distinct select on columns"""
    distinct_on: [dipdup_token_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_token_metadata_order_by!]

    """filter the rows returned"""
    where: dipdup_token_metadata_bool_exp
  ): [dipdup_token_metadata!]!

  """
  fetch data from the table: "dipdup_token_metadata" using primary key columns
  """
  dipdupTokenMetadataByPk(id: Int!): dipdup_token_metadata

  """
  fetch data from the table: "from"
  """
  from(
    """distinct select on columns"""
    distinct_on: [from_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [from_order_by!]

    """filter the rows returned"""
    where: from_bool_exp
  ): [from!]!

  """fetch data from the table: "from" using primary key columns"""
  fromByPk(address: String!): from

  """
  fetch data from the table: "highest_bidder"
  """
  highestBidder(
    """distinct select on columns"""
    distinct_on: [highest_bidder_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highest_bidder_order_by!]

    """filter the rows returned"""
    where: highest_bidder_bool_exp
  ): [highest_bidder!]!

  """fetch data from the table: "highest_bidder" using primary key columns"""
  highestBidderByPk(address: String!): highest_bidder

  """
  fetch data from the table: "last_sale"
  """
  lastSale(
    """distinct select on columns"""
    distinct_on: [last_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [last_sale_order_by!]

    """filter the rows returned"""
    where: last_sale_bool_exp
  ): [last_sale!]!

  """fetch data from the table: "last_sale" using primary key columns"""
  lastSaleByPk(id: bigint!): last_sale

  """
  fetch data from the table: "sell"
  """
  sell(
    """distinct select on columns"""
    distinct_on: [sell_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sell_order_by!]

    """filter the rows returned"""
    where: sell_bool_exp
  ): [sell!]!

  """fetch data from the table: "sell" using primary key columns"""
  sellByPk(id: bigint!): sell

  """
  fetch data from the table: "seller"
  """
  seller(
    """distinct select on columns"""
    distinct_on: [seller_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [seller_order_by!]

    """filter the rows returned"""
    where: seller_bool_exp
  ): [seller!]!

  """fetch data from the table: "seller" using primary key columns"""
  sellerByPk(address: String!): seller

  """
  fetch data from the table: "to"
  """
  to(
    """distinct select on columns"""
    distinct_on: [to_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [to_order_by!]

    """filter the rows returned"""
    where: to_bool_exp
  ): [to!]!

  """fetch data from the table: "to" using primary key columns"""
  toByPk(address: String!): to
}

"""
columns and relationships of "sell"
"""
type sell {
  id: bigint!
  level: bigint!
  saleAmount: String!

  """An object relationship"""
  seller: seller!
  sellerId: String!
  timestamp: timestamptz!
  tokenAddress: String!
  tokenId: String!
}

"""
order by aggregate values of table "sell"
"""
input sell_aggregate_order_by {
  avg: sell_avg_order_by
  count: order_by
  max: sell_max_order_by
  min: sell_min_order_by
  stddev: sell_stddev_order_by
  stddev_pop: sell_stddev_pop_order_by
  stddev_samp: sell_stddev_samp_order_by
  sum: sell_sum_order_by
  var_pop: sell_var_pop_order_by
  var_samp: sell_var_samp_order_by
  variance: sell_variance_order_by
}

"""
order by avg() on columns of table "sell"
"""
input sell_avg_order_by {
  id: order_by
  level: order_by
}

"""
Boolean expression to filter rows from the table "sell". All fields are combined with a logical 'AND'.
"""
input sell_bool_exp {
  _and: [sell_bool_exp!]
  _not: sell_bool_exp
  _or: [sell_bool_exp!]
  id: bigint_comparison_exp
  level: bigint_comparison_exp
  saleAmount: String_comparison_exp
  seller: seller_bool_exp
  sellerId: String_comparison_exp
  timestamp: timestamptz_comparison_exp
  tokenAddress: String_comparison_exp
  tokenId: String_comparison_exp
}

"""
order by max() on columns of table "sell"
"""
input sell_max_order_by {
  id: order_by
  level: order_by
  saleAmount: order_by
  sellerId: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
order by min() on columns of table "sell"
"""
input sell_min_order_by {
  id: order_by
  level: order_by
  saleAmount: order_by
  sellerId: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""Ordering options when selecting data from "sell"."""
input sell_order_by {
  id: order_by
  level: order_by
  saleAmount: order_by
  seller: seller_order_by
  sellerId: order_by
  timestamp: order_by
  tokenAddress: order_by
  tokenId: order_by
}

"""
select columns of table "sell"
"""
enum sell_select_column {
  """column name"""
  id

  """column name"""
  level

  """column name"""
  saleAmount

  """column name"""
  sellerId

  """column name"""
  timestamp

  """column name"""
  tokenAddress

  """column name"""
  tokenId
}

"""
order by stddev() on columns of table "sell"
"""
input sell_stddev_order_by {
  id: order_by
  level: order_by
}

"""
order by stddev_pop() on columns of table "sell"
"""
input sell_stddev_pop_order_by {
  id: order_by
  level: order_by
}

"""
order by stddev_samp() on columns of table "sell"
"""
input sell_stddev_samp_order_by {
  id: order_by
  level: order_by
}

"""
order by sum() on columns of table "sell"
"""
input sell_sum_order_by {
  id: order_by
  level: order_by
}

"""
order by var_pop() on columns of table "sell"
"""
input sell_var_pop_order_by {
  id: order_by
  level: order_by
}

"""
order by var_samp() on columns of table "sell"
"""
input sell_var_samp_order_by {
  id: order_by
  level: order_by
}

"""
order by variance() on columns of table "sell"
"""
input sell_variance_order_by {
  id: order_by
  level: order_by
}

"""
columns and relationships of "seller"
"""
type seller {
  address: String!

  """An array relationship"""
  sells(
    """distinct select on columns"""
    distinct_on: [sell_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sell_order_by!]

    """filter the rows returned"""
    where: sell_bool_exp
  ): [sell!]!
}

"""
Boolean expression to filter rows from the table "seller". All fields are combined with a logical 'AND'.
"""
input seller_bool_exp {
  _and: [seller_bool_exp!]
  _not: seller_bool_exp
  _or: [seller_bool_exp!]
  address: String_comparison_exp
  sells: sell_bool_exp
}

"""Ordering options when selecting data from "seller"."""
input seller_order_by {
  address: order_by
  sells_aggregate: sell_aggregate_order_by
}

"""
select columns of table "seller"
"""
enum seller_select_column {
  """column name"""
  address
}

type subscription_root {
  """
  fetch data from the table: "ask"
  """
  ask(
    """distinct select on columns"""
    distinct_on: [ask_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ask_order_by!]

    """filter the rows returned"""
    where: ask_bool_exp
  ): [ask!]!

  """
  fetch data from the table: "ask_auction"
  """
  askAuction(
    """distinct select on columns"""
    distinct_on: [ask_auction_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ask_auction_order_by!]

    """filter the rows returned"""
    where: ask_auction_bool_exp
  ): [ask_auction!]!

  """fetch data from the table: "ask_auction" using primary key columns"""
  askAuctionByPk(id: bigint!): ask_auction

  """fetch data from the table: "ask" using primary key columns"""
  askByPk(id: bigint!): ask

  """
  fetch data from the table: "asker"
  """
  asker(
    """distinct select on columns"""
    distinct_on: [asker_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [asker_order_by!]

    """filter the rows returned"""
    where: asker_bool_exp
  ): [asker!]!

  """fetch data from the table: "asker" using primary key columns"""
  askerByPk(address: String!): asker

  """
  fetch data from the table: "auction_creator"
  """
  auctionCreator(
    """distinct select on columns"""
    distinct_on: [auction_creator_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [auction_creator_order_by!]

    """filter the rows returned"""
    where: auction_creator_bool_exp
  ): [auction_creator!]!

  """fetch data from the table: "auction_creator" using primary key columns"""
  auctionCreatorByPk(address: String!): auction_creator

  """
  fetch data from the table: "bid"
  """
  bid(
    """distinct select on columns"""
    distinct_on: [bid_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bid_order_by!]

    """filter the rows returned"""
    where: bid_bool_exp
  ): [bid!]!

  """fetch data from the table: "bid" using primary key columns"""
  bidByPk(id: bigint!): bid

  """
  fetch data from the table: "bidder"
  """
  bidder(
    """distinct select on columns"""
    distinct_on: [bidder_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bidder_order_by!]

    """filter the rows returned"""
    where: bidder_bool_exp
  ): [bidder!]!

  """fetch data from the table: "bidder" using primary key columns"""
  bidderByPk(address: String!): bidder

  """
  fetch data from the table: "buy"
  """
  buy(
    """distinct select on columns"""
    distinct_on: [buy_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buy_order_by!]

    """filter the rows returned"""
    where: buy_bool_exp
  ): [buy!]!

  """fetch data from the table: "buy" using primary key columns"""
  buyByPk(id: bigint!): buy

  """
  fetch data from the table: "buyer"
  """
  buyer(
    """distinct select on columns"""
    distinct_on: [buyer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buyer_order_by!]

    """filter the rows returned"""
    where: buyer_bool_exp
  ): [buyer!]!

  """fetch data from the table: "buyer" using primary key columns"""
  buyerByPk(address: String!): buyer

  """
  fetch data from the table: "dipdup_contract"
  """
  dipdupContract(
    """distinct select on columns"""
    distinct_on: [dipdup_contract_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_contract_order_by!]

    """filter the rows returned"""
    where: dipdup_contract_bool_exp
  ): [dipdup_contract!]!

  """fetch data from the table: "dipdup_contract" using primary key columns"""
  dipdupContractByPk(name: String!): dipdup_contract

  """
  fetch data from the table: "dipdup_contract_metadata"
  """
  dipdupContractMetadata(
    """distinct select on columns"""
    distinct_on: [dipdup_contract_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_contract_metadata_order_by!]

    """filter the rows returned"""
    where: dipdup_contract_metadata_bool_exp
  ): [dipdup_contract_metadata!]!

  """
  fetch data from the table: "dipdup_contract_metadata" using primary key columns
  """
  dipdupContractMetadataByPk(id: Int!): dipdup_contract_metadata

  """
  fetch data from the table: "dipdup_head"
  """
  dipdupHead(
    """distinct select on columns"""
    distinct_on: [dipdup_head_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_head_order_by!]

    """filter the rows returned"""
    where: dipdup_head_bool_exp
  ): [dipdup_head!]!

  """fetch data from the table: "dipdup_head" using primary key columns"""
  dipdupHeadByPk(name: String!): dipdup_head

  """
  fetch data from the table: "dipdup_head_status"
  """
  dipdupHeadStatus(
    """distinct select on columns"""
    distinct_on: [dipdup_head_status_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_head_status_order_by!]

    """filter the rows returned"""
    where: dipdup_head_status_bool_exp
  ): [dipdup_head_status!]!

  """
  fetch data from the table: "dipdup_index"
  """
  dipdupIndex(
    """distinct select on columns"""
    distinct_on: [dipdup_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_index_order_by!]

    """filter the rows returned"""
    where: dipdup_index_bool_exp
  ): [dipdup_index!]!

  """fetch data from the table: "dipdup_index" using primary key columns"""
  dipdupIndexByPk(name: String!): dipdup_index

  """
  fetch data from the table: "dipdup_schema"
  """
  dipdupSchema(
    """distinct select on columns"""
    distinct_on: [dipdup_schema_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_schema_order_by!]

    """filter the rows returned"""
    where: dipdup_schema_bool_exp
  ): [dipdup_schema!]!

  """fetch data from the table: "dipdup_schema" using primary key columns"""
  dipdupSchemaByPk(name: String!): dipdup_schema

  """
  fetch data from the table: "dipdup_token_metadata"
  """
  dipdupTokenMetadata(
    """distinct select on columns"""
    distinct_on: [dipdup_token_metadata_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dipdup_token_metadata_order_by!]

    """filter the rows returned"""
    where: dipdup_token_metadata_bool_exp
  ): [dipdup_token_metadata!]!

  """
  fetch data from the table: "dipdup_token_metadata" using primary key columns
  """
  dipdupTokenMetadataByPk(id: Int!): dipdup_token_metadata

  """
  fetch data from the table: "from"
  """
  from(
    """distinct select on columns"""
    distinct_on: [from_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [from_order_by!]

    """filter the rows returned"""
    where: from_bool_exp
  ): [from!]!

  """fetch data from the table: "from" using primary key columns"""
  fromByPk(address: String!): from

  """
  fetch data from the table: "highest_bidder"
  """
  highestBidder(
    """distinct select on columns"""
    distinct_on: [highest_bidder_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [highest_bidder_order_by!]

    """filter the rows returned"""
    where: highest_bidder_bool_exp
  ): [highest_bidder!]!

  """fetch data from the table: "highest_bidder" using primary key columns"""
  highestBidderByPk(address: String!): highest_bidder

  """
  fetch data from the table: "last_sale"
  """
  lastSale(
    """distinct select on columns"""
    distinct_on: [last_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [last_sale_order_by!]

    """filter the rows returned"""
    where: last_sale_bool_exp
  ): [last_sale!]!

  """fetch data from the table: "last_sale" using primary key columns"""
  lastSaleByPk(id: bigint!): last_sale

  """
  fetch data from the table: "sell"
  """
  sell(
    """distinct select on columns"""
    distinct_on: [sell_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sell_order_by!]

    """filter the rows returned"""
    where: sell_bool_exp
  ): [sell!]!

  """fetch data from the table: "sell" using primary key columns"""
  sellByPk(id: bigint!): sell

  """
  fetch data from the table: "seller"
  """
  seller(
    """distinct select on columns"""
    distinct_on: [seller_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [seller_order_by!]

    """filter the rows returned"""
    where: seller_bool_exp
  ): [seller!]!

  """fetch data from the table: "seller" using primary key columns"""
  sellerByPk(address: String!): seller

  """
  fetch data from the table: "to"
  """
  to(
    """distinct select on columns"""
    distinct_on: [to_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [to_order_by!]

    """filter the rows returned"""
    where: to_bool_exp
  ): [to!]!

  """fetch data from the table: "to" using primary key columns"""
  toByPk(address: String!): to
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "to"
"""
type to {
  address: String!

  """An array relationship"""
  lastSales(
    """distinct select on columns"""
    distinct_on: [last_sale_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [last_sale_order_by!]

    """filter the rows returned"""
    where: last_sale_bool_exp
  ): [last_sale!]!
}

"""
Boolean expression to filter rows from the table "to". All fields are combined with a logical 'AND'.
"""
input to_bool_exp {
  _and: [to_bool_exp!]
  _not: to_bool_exp
  _or: [to_bool_exp!]
  address: String_comparison_exp
  lastSales: last_sale_bool_exp
}

"""Ordering options when selecting data from "to"."""
input to_order_by {
  address: order_by
  lastSales_aggregate: last_sale_aggregate_order_by
}

"""
select columns of table "to"
"""
enum to_select_column {
  """column name"""
  address
}